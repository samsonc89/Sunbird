---

---


  <div class="slider-container flex gap-6 mx-6 max-sm:m-3">
    <!-- Item 1 -->
    <div class="slide">
      <h6 class="text-center rounded-lg p-4 ml-4">
        “Our son was diagnosed with bilateral moderate sensorineural
        hearing loss as a newborn. We were in the middle of a pandemic and
        feeling overwhelmed about raising a baby in quarantine, let alone
        all the services our new baby would require.” <br>~DS</br>
      </h6>
    </div>

    <!-- Item 2 -->
    <div class="slide ml-6">
      <h6 class="text-center rounded-lg ">
        “Rana is a creative and caring speech therapist. She worked for
        two years with my toddler aged daughter creating activities that
        engaged my child to help her develop her speech pronunciation...
         <br>~KT</br>
      </h6>
    </div>

    <!-- Item 3 -->
    <div class="slide ml-3.5">
      <h6 class="text-center rounded-lg">
        "My daughter began working with Rana at 6 months old after being
        diagnosed with unilateral sensorineural hearing loss. Rana's calm
        and kind demeanor immediately put my daughter at ease. <br>~MH</br>
      </h6>
    </div>
  </div>

<!-- <script src="/src/js/slider.js"></script> -->

<script>
  document.addEventListener('DOMContentLoaded', () => {
  const sliders = document.querySelectorAll<HTMLElement>('.slider-container'); // Specify HTMLElement
    if (sliders.length === 0) {
        console.error('No slider containers found');
        return; // Exit early if no sliders are found
    }

const slides = Array.from(document.querySelectorAll<HTMLElement>('.slide')); // Specify HTMLElement
  if (slides.length === 0) {
        console.error('No slides found');
        return; // Exit early if no slides are found
    }

let isDragging = false,
  startPos = 0,
  currentTranslate = 0,
  prevTranslate = 0,
  animationID = 0,
  currentIndex = 0;

slides.forEach((slide, index) => {
  // Safely handle potential nulls for slideImage
  const slideImage = slide.querySelector<HTMLHeadingElement>('h6'); // Specify HTMLHeadingElement
  if (slideImage) {
    slideImage.addEventListener('dragstart', (e: DragEvent) => e.preventDefault());
  }

  // Assign event listeners with proper typing
  slide.addEventListener('touchstart', (event: TouchEvent) => touchStart(event, index));
  slide.addEventListener('touchend', touchEnd);
  slide.addEventListener('touchmove', (event: TouchEvent) => touchMove(event));

  // Mouse events
  slide.addEventListener('mousedown', (event: MouseEvent) => touchStart(event, index));
  slide.addEventListener('mouseup', touchEnd);
  slide.addEventListener('mouseleave', touchEnd);
  slide.addEventListener('mousemove', (event: MouseEvent) => touchMove(event));
});

// Disable context menu
window.oncontextmenu = function (event) {
  event.preventDefault();
  event.stopPropagation();
  return false;
};

// touchStart function to handle both mouse and touch events
function touchStart(event: MouseEvent | TouchEvent, index: number) {
  currentIndex = index;
  startPos = getPositionX(event);
  isDragging = true;

  // Start animation
  animationID = requestAnimationFrame(animation);

  // Apply grabbing effect to all sliders in NodeList
  sliders.forEach(slider => slider.classList.add('grabbing'));
}

document.addEventListener('DOMContentLoaded', () => {
    const slider = document.querySelector('.slider-container');
    if (slider) {
        slider.classList.add('grabbing');
    } else {
        console.error('Slider container not found');
    }
});

console.log(document.querySelector('.slider-container')); // Check what this outputs


function touchEnd() {
  isDragging = false;
  cancelAnimationFrame(animationID);

  const movedBy = currentTranslate - prevTranslate;

  if (movedBy < -100 && currentIndex < slides.length - 1) currentIndex += 1;
  if (movedBy > 100 && currentIndex > 0) currentIndex -= 1;

  setPositionByIndex();

  // Remove grabbing effect from all sliders
  sliders.forEach(slider => slider.classList.remove('grabbing'));
}

function touchMove(event: MouseEvent | TouchEvent) {
  if (isDragging) {
    const currentPosition = getPositionX(event);
    currentTranslate = prevTranslate + currentPosition - startPos;
  }
}

function getPositionX(event: MouseEvent | TouchEvent): number {
  return event instanceof MouseEvent
    ? event.pageX
    : (event as TouchEvent).touches[0].clientX;
}

function animation() {
  setSliderPosition();
  if (isDragging) requestAnimationFrame(animation);
}

function setSliderPosition() {
  sliders.forEach(slider => {
    slider.style.transform = `translateX(${currentTranslate}px)`;
  });
}

function setPositionByIndex() {
  currentTranslate = currentIndex * -window.innerWidth;
  prevTranslate = currentTranslate;
  setSliderPosition();
}
});

</script>

<style>
  * {
    /* border: 1px solid red; */
  }

.slider-container {
    max-height: 100%;
    display: inline-flex;
    overflow: hidden;
    transform: translateX(0);
    transition: transform 0.3s ease-out;
    cursor: grab;
  }

  .slide {
    background-color: var(secondary);
    max-height: 100vh;
    width: 90vw;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 1rem 0;
    user-select: none;
  }

  .slide img {
    max-width: 100%;
    max-height: 60%;
    transition: transform 0.3s ease-in-out;
  }

  .slide h6 {
    padding: 1rem;
    background-color: white;
    max-width: 100%;
    max-height: 100%;
    transition: transform 0.3s ease-in-out;
  }

  .slide h2 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }

  .slide h4 {
    font-size: 1.3rem;
  }

  .btn {
    background-color: #444;
    color: #fff;
    text-decoration: none;
    padding: 1rem 1.5rem;
  }

  .grabbing {
    cursor: grabbing;
  }

  .grabbing .slide img {
    transform: scale(0.9);
  }

  .grabbing .slide h6 {
    transform: scale(0.9);
  }
</style>
